Effect {
  type EffectType,
  cond Condition,
  effect Choice {
    AttributeGain,
    ChooseCard,
    RevealCard,
    MoveCard,
    SearchCard,
    PayCost,
    AbilityGain,
    PerformEffect,
    MoveWrToDeck,
    FlipOver,
    Backup,
    Look,
    NonMandatory,
    ChangeState,
    DealDamage,
    CannotUseBackupOrEvent,
    SwapCards,
    CannotAttack,
    AddMarker,
    Bond,
    PerformReplay,
    Replay,
    DrawCard,
    Shuffle,
    CannotBecomeReversed,
    OpponentAutoCannotDealDamage,
    CannotMove,
    SideAttackWithoutPenalty,
    PutOnStageRested,
    RemoveMarker,
    CannotStand,
    CannotBeChosen,
    TriggerIconGain,
    CanPlayWithoutColorRequirement,
    DelayedAbility,
    CostSubstitution,
    StockSwap,
    SkipPhase,
    OtherEffect,
    Nothing
  }
}

enum EffectType {
  attributeGain = 1,
  chooseCard = 2,
  revealCard = 3,
  moveCard = 4,
  searchCard = 5,
  payCost = 6,
  abilityGain = 7,
  moveWrToDeck = 8,
  flipOver = 9,
  backup = 10,
  triggerCheckTwice = 11,
  look = 12,
  nonMandatory = 13,
  earlyPlay = 14,
  cannotPlay = 15,
  performEffect = 16,
  changeState = 17,
  dealDamage = 18,
  cannotUseBackupOrEvent = 19,
  drawCard = 20,
  swapCards = 21,
  cannotAttack = 22,
  charAutoCannotDealDamage = 23,
  opponentAutoCannotDealDamage = 24,
  cannotBecomeReversed = 25,
  stockSwap = 26,
  addMarker = 27,
  bond = 28,
  cannotMove = 29,
  performReplay = 30,
  replay = 31,
  sideAttackWithoutPenalty = 32,
  standby = 33,
  shuffle = 34,
  putOnStageRested = 35,
  removeMarker = 36,
  cannotStand = 37,
  cannotBeChosen = 38,
  triggerIconGain = 39,
  canPlayWithoutColorRequirement = 40,
  shotTrigger = 41, // just to differentiate that it's not char's effect
  delayedAbility = 42,
  costSubstitution = 43,
  skipPhase = 44,
  chooseTrait = 45,
  traitModification = 46,
  
  otherEffect = 255
}

enum AttributeType {
  power = 1,
  soul = 2,
  level = 3
}


AttributeGain {
  target Target,
  type AttributeType,
  gainType ValueType,
  value Int32,
  modifier Choice {
    Multiplier,
    Nothing
  },
  duration UInt8
}

enum ValueType {
  rawValue = 1,
  multiplier = 2
}

// Multiple cardSpecifiers of the same type will be 'or'ed ("Choose 'name1' or 'name2'...")
// Multiple TargetAndPlace will be 'or'ed ("Choose 'Shuchiin' character or an event...")
// Multiple consecutive ChooseCard effects will be 'and'ed:
// "look at up to 6 cards from top of your deck, choose up to 1 red character and up to 1 blue character"
ChooseCard {
  executor Player,
  targets Array of TargetAndPlace, // 'or' between targets
  excluding Array of Card
}

TargetAndPlace {
  target Target,
  placeType PlaceType,
  place Choice {
    Place,
    Nothing
  }
}

Look {
  number Number,
  place Place,
  valueType ValueType,
  multiplier Choice {
    Multiplier,
    Nothing
  }
}


RevealCard {
  type RevealType,
  number Number,
  card Choice {
    Card,
    Nothing
  }
}

enum RevealType {
  topDeck = 1,
  chosenCards = 2,
  fromHand = 3
}


MoveCard {
  executor Player,
  target Target,
  from Place,
  to Array of Place, // OR is applied if there are more than one destination
  order Order
}

enum Order {
  notSpecified = 0,
  any = 1,
  same = 2
}


PayCost {
  ifYouDo Array of Effect,
  ifYouDont Array of Effect
}


AbilityGain {
  target Target,
  number UInt8, // how much abilities the card gets
  abilities Array of Ability,
  duration UInt8
}

PerformEffect {
  numberOfEffects UInt8,
  numberOfTimes UInt8,
  effects Array of EventAbility
}

// almost the same as 'choose' effect, but it exists for translation purposes
// usually it's 'search your deck' but you can also search your stock or who knows what else
// cards beeing searched for by user become chosen
SearchCard {
  targets Array of SearchTarget,
  place Place
}

SearchTarget {
  number Number,
  cards Array of Card // OR is applied to elements of this array
}


MoveWrToDeck {
  executor Player
}


// flip over 'number' cards from top deck, for each 'forEach' do 'effect'
FlipOver {
  number Number,
  forEach Card,
  effect Array of Effect
}


Backup {
  power Int32,
  level Int8
}


// for every 'may' in the ability use this effect
NonMandatory {
  effect Array of Effect,
  ifYouDo Array of Effect,
  ifYouDont Array of Effect
}

// change card orientation
ChangeState {
  target Target,
  state State
}

DealDamage {
  damageType ValueType,
  damage UInt8,
  modifier Choice {
    Multiplier,
    Nothing
  }
}

CannotUseBackupOrEvent {
  what BackupOrEvent,
  player Player,
  duration UInt8
}

enum BackupOrEvent {
  backup = 1,
  event = 2,
  both = 3
}

SwapCards {
  first ChooseCard,
  second ChooseCard
}

CannotAttack {
  target Target,
  type AttackType,
  duration UInt8
}

AddMarker {
  target Target,
  from Place,
  destination Target,
  orientation FaceOrientation,
  withMarkers Bool
}

RemoveMarker {
  targetMarker Target,
  markerBearer Target,
  place Place // where to
}

// not supported
// use on play pay cost, choose and move
Bond {
  value String
}

PerformReplay {
  value String
}

Replay {
  name String,
  effects Array of Effect
}

DrawCard {
  executor Player,
  value Number
}

Shuffle {
  zone Zone,
  owner Player
}

CannotBecomeReversed {
  target Target,
  duration UInt8
}

OpponentAutoCannotDealDamage {
  duration UInt8
}

CannotMove {
  target Target,
  duration UInt8
}

CannotStand {
  target Target,
  duration UInt8
}

SideAttackWithoutPenalty {
  target Target,
  duration UInt8
}

PutOnStageRested {
  target Target,
  from Place,
  to Position
}

CannotBeChosen {
  target Target,
  duration UInt8
}

TriggerIconGain {
  target Target,
  triggerIcon TriggerIcon,
  duration UInt8
}

CanPlayWithoutColorRequirement {
  target Target,
  duration UInt8
}

// i.e. DBG/W87-057 Act ability
DelayedAbility {
  ability AutoAbility,
  duration UInt8 // ability will cease to exist after that time
}

// do not add NonMandatory here
// ability always presumes you can choose
// number of markers to move
CostSubstitution {
  effect Effect // perform it instead of 1 stock
}

StockSwap {
  zone Zone // where to put stock
}

SkipPhase {
  skipUntil Phase
}

ChooseTrait {
  target TargetAndPlace
}

TraitModification {
  type TraitModificationType,
  target TargetAndPlace,
  traitType TraitType,
  traits Array of String,
  duration UInt8
}

OtherEffect {
  cardCode String,
  effectId Int8
}
