syntax = "proto3";

import "ability.proto";

message CardToChoose {
    sint32 position = 1;
    sint32 id = 2;
    string zone = 3;
    ProtoOwner owner = 4;
}

message EventAbilityActivated {
    repeated ProtoAbility abilities = 1;
}

message EventPlayAbility {
    uint32 unique_id = 1;
}

message EventStartResolvingAbility {
    uint32 unique_id = 1;
}

message EventAbilityResolved {
    uint32 unique_id = 1;
}
message EventEndResolvingAbilties {}

message EventChooseCard {
    bytes effect = 1;
    bool mandatory = 2;
    repeated CardToChoose cards = 3;
    bool consider_cannot_be_chosen = 4;
}

message PrintContext {
    sint32 mentioned_cards_count = 1;
    sint32 last_moved_cards_count = 2;
}

message EventMoveChoice {
    sint32 effect_type = 1;
    bytes effect = 2;
    PrintContext print_context = 3;
}

message EventMoveTargetChoice {
    bytes effect = 1;
    bool mandatory = 2;
}

message EventMoveDestinationChoice {
    bytes effect = 1;
    bool mandatory = 2;
}

message EventMoveDestinationIndexChoice {
    bytes effect = 1;
    bool mandatory = 2;
    sint32 effect_type = 3;
}

message EventDrawChoice {
    bytes effect = 1;
    bool mandatory = 2;
}

message EventLook {
    bytes effect = 1;
    sint32 next_effect_type = 2;
    bytes next_effect = 3;
}

message EventLookTopDeck {
    sint32 card_id = 1;
    string code = 2;
    bool is_opponent = 3;
}

message EventReveal {
    bytes effect = 1;
    sint32 next_effect_type = 2;
    bytes next_effect = 3;
}

message EventRevealTopDeck {
    sint32 card_id = 1;
    string code = 2;
}

message EventRevealFromHand {
    sint32 hand_pos = 1;
    string code = 2;
}

message EventConditionNotMet {}
message EventPayCost {}

message EventSearchCard {
    bytes effect = 1;
    repeated string codes = 2;
}

message EventAbilityChoice {
    bytes effect = 1;
}

message EventAbilityGain {
    sint32 card_pos = 1;
    string zone = 2;
    sint32 ability_id = 3;
    bytes ability = 4;
}

message EventRemoveAbility {
    sint32 card_pos = 1;
    string zone = 2;
    sint32 ability_id = 3;
}

message EventSetCannotPlay {
    sint32 hand_pos = 1;
    bool cannot_play = 2;
}

message EventEffectChoice {
    bytes effect = 1;
}

message EventSetCardStateChoice {
    bytes effect = 1;
    bool mandatory = 2;
}

message EventSetCardStateTargetChoice {
    bytes effect = 1;
    bool mandatory = 2;
}

message EventSetCardBoolAttr {
    sint32 card_pos = 1;
    string zone = 2;
    ProtoCardBoolAttribute attr = 3;
    bool value = 4;
}

message EventSetPlayerAttr {
    ProtoPlayerAttribute attr = 1;
    bool value = 2;
}

message EventTextChoice {
    string header = 1;
    repeated string choices = 2;
}

message EventSetCardTraits {
    sint32 card_pos = 1;
    string zone = 2;
    repeated string traits = 3;
}

message EventConfirmationRequest {}
